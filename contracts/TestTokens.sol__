// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IRC20 {
	event OwnershipRenounced(address indexed previousOwner);
	event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

	event Approval(address indexed owner, address indexed spender, uint value);
	event Transfer(address indexed from, address indexed to, uint value);
		
    mapping(address => uint256) public balanceOf;

    mapping(address => mapping(address => uint256)) public allowances;

	address public owner;
	
    uint256 public totalSupply;
    string public name;
    string public symbol;
    uint8 public decimals;

    constructor(string memory _name, string memory _symbol, uint8 _decimals) {
		owner = msg.sender;
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
    }

	modifier onlyOwner() {
		require(msg.sender == owner);
		_;
	}

	function transferOwnership(address newOwner) public onlyOwner {
		require(newOwner != address(0));
		emit OwnershipTransferred(owner, newOwner);
		owner = newOwner;
	}

	function renounceOwnership() public onlyOwner {
		emit OwnershipRenounced(owner);
		owner = address(0);
	}

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function approve(address spender, uint256 amount) public  returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public  returns (bool) {
        _transfer(sender, recipient, amount);
        require(allowances[sender][msg.sender] >= amount, 'ERC20: transfer amount exceeds allowance');
        _approve(sender, msg.sender, allowances[sender][msg.sender] - amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
        uint c = allowances[msg.sender][spender] + addedValue;
        require(c >= addedValue, "SafeMath: addition overflow");
        _approve(msg.sender, spender, c);
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public  returns (bool) {
        require(allowances[msg.sender][msg.sender] >= subtractedValue, 'ERC20: decreased allowance below zero');
        _approve(msg.sender, spender, allowances[msg.sender][msg.sender] - subtractedValue);
        return true;
    }

    function mint(uint256 amount) public  onlyOwner returns (bool) {
        _mint(msg.sender, amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), 'HRC20: transfer from the zero address');
        require(recipient != address(0), 'HRC20: transfer to the zero address');
        require(balanceOf[sender] >= amount, 'ERC20: transfer amount exceeds balance');
        balanceOf[sender] -= amount;
        uint c = balanceOf[recipient] + amount;
        require(c >= amount, "SafeMath: addition overflow");
        balanceOf[recipient] = c;
        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), 'HRC20: mint to the zero address');
        uint c = totalSupply + amount;
        require(c >= amount, "SafeMath: addition overflow");
        totalSupply += amount;
        balanceOf[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), 'HRC20: burn from the zero address');
        require(balanceOf[account] >= amount, 'ERC20: burn amount exceeds balance');
        balanceOf[account] -= amount;
        totalSupply -= amount;
        emit Transfer(account, address(0), amount);
    }

    function _approve(address account, address spender, uint256 amount) internal {
        require(account != address(0), 'HRC20: approve from the zero address');
        require(spender != address(0), 'HRC20: approve to the zero address');
        allowances[account][spender] = amount;
        emit Approval(account, spender, amount);
    }

    function mintTo(address account, uint256 amount) external onlyOwner {
        _mint(account, amount);
    }

    function burnFrom(address account, uint256 amount) external onlyOwner {
        _burn(account, amount);
    }
}

contract TestTokens {
	address[] tokens;

	constructor(string[] memory names, string[] memory symbols, uint8[] memory decimals, address owner) {
		for(uint i=0; i<symbols.length; i++) {
			IRC20 token = new IRC20(names[i], symbols[i], decimals[i]);
			token.mintTo(owner, 1e6 * 10 ** decimals[i]);
			token.transferOwnership(owner);
			tokens.push(address(token));
		}
	}

	function getTokens() public view returns(address[] memory) {
		return tokens;
	}
}